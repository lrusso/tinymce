<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8">
		<title>TinyMCE 4.9.4 | Leonardo Russo</title>
		<script src="https://lrusso.github.io/tinyMCE/tinymce.min.js"></script> 
		<script src="./plugins/chart/plugin.min.js"></script> 
		<script src="./plugins/spreadsheet/plugin.min.js"></script> 
		<script>
			tinymce.init(
							{
							selector:"#my_TinyMCE_Document",
							auto_focus: "my_TinyMCE_Document",
							language: "en", // OR "es" FOR SPANISH
							plugins: "advlist anchor autolink charmap chart codesample colorpicker contextmenu directionality hr image imagetools insertdatetime link lists media nonbreaking pagebreak paste print save searchreplace spellchecker spreadsheet table template textcolor textpattern visualblocks visualchars wordcount",
							toolbar1: "save | spellchecker | print | cut copy paste | undo redo | searchreplace | template image link table chart spreadsheet | charmap",
							toolbar2: "fontselect | fontsizeselect | bold italic underline strikethrough | alignleft aligncenter alignright alignjustify | forecolor backcolor | bullist numlist | outdent indent | removeformat",

							// GETTING ALL THE POSSIBLE EVENTS IN TINYMCE
							setup:function(ed)
								{
								ed.on("init", function (e)						{			});
								ed.on("click", function (e)						{			});
								ed.on("dblclick", function (e)					{			});
								ed.on("mousedown", function (e)					{			});
								ed.on("mouseup", function (e)					{			});
								ed.on("mousemove", function (e)					{			});
								ed.on("mouseenter", function (e)				{			});
								ed.on("mouseleave", function (e)				{			});
								ed.on("keypress", function (e)					{			});
								ed.on("keydown", function (e)					{
																				//CODE FOR ADDING SPACES (TABS) WHEN THE TAB KEY IS DOWN
																				if (e.keyCode==9)
																					{
																					var element=ed.dom.getParent(ed.selection.getNode(),"table");
																					if (element==null)
																						{
																						ed.execCommand("mceInsertContent",false,"&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ");
																						e.preventDefault();
																						return false;
																						}
																					}
																				});
								ed.on("keyup", function (e)						{			});
								ed.on("focus", function(e)						{			});
								ed.on("blur", function(e)						{			});
								ed.on("dirty", function (e)						{			});
								ed.on("FullscreenStateChanged", function(e)		{			});
								},

							// SETTING THE TEMPLATES
							templates:
								[
								{ title: "Test template 1", content: "Test 1" },
								{ title: "Test template 2", content: "Test 2" }
								],

							// SETTING THE SPELLCHECKER
							spellchecker_language: "en",
							spellchecker_languages: "English=en,Spanish=es",
							spellchecker_callback: function(method, text, success, failure)
								{
								tinymce.util.JSONRequest.sendRPC(
									{
									url: "mySpellchecker.php",
									method: "spellcheck",
									params:
										{
										lang: this.getLanguage(),
										words: text.match(this.getWordCharPattern())
										},
									success: function(result)
										{
										success(result);
										},
									error: function(error, xhr)
										{
										failure("Spellcheck error:" + xhr.status);
										}
									});
								},

							// THE FOLLOWING FUNCTION ALLOWS TO UPLOAD IMAGES INTO THE DOCUMENT AS BASE64
							images_upload_handler: function (blobInfo, success, failure)
								{
								try
									{
									var reader = new FileReader();
									reader.readAsDataURL(blobInfo.blob());
									reader.onloadend = function()
										{
										var base64data = reader.result;
										success(base64data);
										};
									}
									catch(err)
									{
									success("");
									}
								},
							paste_data_images: true,

							// THE FOLLOWING FUNCTION ALLOWS TO NOTIFY THE USER THAT INSERTED IMAGES ARE LINKED TO OTHER WEBSITES
							paste_preprocess: function(plugin, args)
								{
								var re = new RegExp(/<img[^>]* src="http.*?>/i);
								if (re.test(args.content))
									{
									tinymce.activeEditor.notificationManager.open({text: "IMPORTANT: Images were inserted in the document that are loaded from other websites and may be not available in other moment.", type: "info", timeout: 8000});
									}
								},

							// SETS THE FUNCTION THAT WILL BE CALLED WHEN THE SAVING EVENT HAPPENS
							save_onsavecallback: function()
								{
								saveDocumentFunction();
								},
							}
						);

			function saveDocumentFunction()
				{
				// DISABLING THE EDITOR AND SHOWING A LOADING ICON
				tinymce.activeEditor.setProgressState(true);
				tinymce.activeEditor.setMode("readonly");

				// SETTING THE PARAMETERS FOR THE REQUEST
				var valueDocument = tinymce.activeEditor.getContent({format:"xml"});
				var params = "documentdata=" + encodeURIComponent(valueDocument);

				// SETTING THE SERVER URL FOR SAVING AND THE TIMEOUT VALUE
				var serverTimeout = 3000;
				var serverSavingURL = "myDocumentSaver.php";

				// STARTING THE CODING OF THE REQUEST
				var http = new XMLHttpRequest();
				http.open("POST", serverSavingURL, true);
				http.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
				http.timeout = serverTimeout;

				// SETTING WHAT HAPPENS WHEN THE REQUEST IS DONE
				http.onreadystatechange = function()
					{
					if(http.readyState == 4)
						{
						// ENABLING THE EDITOR AND HIDING A LOADING ICON
						tinymce.activeEditor.setProgressState(false);
						tinymce.activeEditor.setMode("design");

						// IF THE SERVER REPLIES OK (JUST AS AN EXAMPLE REPLY), THEN THE DOCUMENT WAS SAVED
						if (http.responseText=="OK")
							{
							tinymce.activeEditor.notificationManager.open({text: "Document saved.", type: "info", timeout: serverTimeout});
							}
							else
							{
							tinymce.activeEditor.notificationManager.open({text: "Error while saving.", type: "error", timeout: serverTimeout});
							}

						}
					};

				// SETTING THE ONERROR AND ONTIMEOUT EVENTS
				http.onerror = function (){tinymce.activeEditor.notificationManager.open({text: "Error while saving.", type: "error", timeout: serverTimeout})};
				http.ontimeout = function (e){tinymce.activeEditor.notificationManager.open({text: "Error while saving", type: "error", timeout: serverTimeout})};

				// MAKES THE REQUEST
				http.send(params);
				}

			function resizeTinyMCE()
				{
				var w = window, d = document, e = d.documentElement, g = d.getElementsByTagName("body")[0], x = w.innerWidth || e.clientWidth || g.clientWidth, y = w.innerHeight|| e.clientHeight|| g.clientHeight;
				var editHeight = y - 142;
				tinymce.get("my_TinyMCE_Document").theme.resizeTo("100%", editHeight);
				}

			window.onload = function()
				{
				resizeTinyMCE();
				};

			window.onresize = function()
				{
				resizeTinyMCE();
				};

		</script>
	</head>
	<body style="margin:0;padding:0;">
		<textarea id="my_TinyMCE_Document"></textarea>
	</body>
</html>